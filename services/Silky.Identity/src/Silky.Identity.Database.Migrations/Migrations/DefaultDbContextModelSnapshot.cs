// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Silky.Identity.EntityFrameworkCore.DbContexts;

#nullable disable

namespace Silky.Identity.Database.Migrations.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    partial class DefaultDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Silky.Identity.Domain.IdentityClaimType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedTime");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Regex")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("RegexDescription")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedTime");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClaimTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsStatic = true,
                            Name = "name",
                            Required = false,
                            TenantId = 1L,
                            ValueType = 0
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsStatic = true,
                            Name = "email",
                            Required = false,
                            TenantId = 1L,
                            ValueType = 0
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsStatic = true,
                            Name = "sex",
                            Required = false,
                            TenantId = 1L,
                            ValueType = 0
                        },
                        new
                        {
                            Id = 4L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsStatic = true,
                            Name = "mobilePhone",
                            Required = false,
                            TenantId = 1L,
                            ValueType = 0
                        },
                        new
                        {
                            Id = 5L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsStatic = true,
                            Name = "telPhone",
                            Required = false,
                            TenantId = 1L,
                            ValueType = 0
                        },
                        new
                        {
                            Id = 6L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsStatic = true,
                            Name = "surname",
                            Required = false,
                            TenantId = 1L,
                            ValueType = 0
                        },
                        new
                        {
                            Id = 7L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsStatic = true,
                            Name = "realName",
                            Required = false,
                            TenantId = 1L,
                            ValueType = 0
                        },
                        new
                        {
                            Id = 8L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsStatic = true,
                            Name = "jobNumber",
                            Required = false,
                            TenantId = 1L,
                            ValueType = 0
                        });
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedTime");

                    b.Property<int>("DataRange")
                        .HasColumnType("int")
                        .HasColumnName("DataRange");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletedTime");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsDefault");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsPublic");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsStatic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext")
                        .HasColumnName("Remark");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Status");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataRange = 0,
                            IsDefault = false,
                            IsDeleted = false,
                            IsPublic = true,
                            IsStatic = true,
                            Name = "admin",
                            NormalizedName = "ADMIN",
                            RealName = "管理员",
                            Sort = 0,
                            Status = 1,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataRange = 1,
                            IsDefault = true,
                            IsDeleted = false,
                            IsPublic = true,
                            IsStatic = true,
                            Name = "normal",
                            NormalizedName = "NORMAL",
                            RealName = "普通用户",
                            Sort = 0,
                            Status = 1,
                            TenantId = 1L
                        });
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityRoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedTime");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityRoleMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedTime");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletedTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsDeleted");

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint")
                        .HasColumnName("MenuId");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("RoleId");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleMenus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2918), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2942), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2949), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 3L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2950), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 4L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2951), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 5L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2955), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 6L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2957), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 7L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2958), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 8L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2959), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 9L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2961), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 10L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2962), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 11L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2964), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 100L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 13L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2965), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 101L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 14L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2966), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 102L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 15L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2967), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 103L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 16L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2968), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 104L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 17L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2969), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 105L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 18L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2971), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 106L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 19L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2972), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 107L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 20L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2973), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 108L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 21L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2974), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 200L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 22L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2975), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 201L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 23L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2976), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 202L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 24L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2977), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 203L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 25L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2978), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 204L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 26L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2979), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 205L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 27L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2980), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1001L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 28L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2982), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1002L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 29L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2983), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1003L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 30L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2984), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1004L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 31L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2985), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1005L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 32L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2986), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1006L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 33L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2987), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1100L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 34L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2988), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1102L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 35L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2990), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1103L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 36L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2991), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1104L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 37L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2992), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1105L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 38L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2993), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1106L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 39L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2994), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1107L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 40L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2995), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 1108L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 41L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2996), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2100L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 42L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2997), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2101L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 43L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(2998), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2102L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 44L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3003), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2200L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 45L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3004), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2201L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 46L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3005), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2202L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 47L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3006), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2203L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 48L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3007), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2300L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 49L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3008), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2301L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 50L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3009), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2400L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 51L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3010), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2401L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 52L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3011), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2402L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 53L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3012), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2403L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 54L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3013), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2404L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 55L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3014), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2405L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 56L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3015), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2406L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 57L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3016), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2407L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 58L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3017), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2501L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 59L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3018), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2502L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 60L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3019), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2503L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 61L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3020), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2504L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 62L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3021), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2505L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 63L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3022), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2506L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 64L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3023), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2507L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 65L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3024), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 3000L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 66L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3026), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 3001L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 67L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3027), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 3002L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 68L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3028), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 3003L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 69L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3029), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 3004L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 70L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3030), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 3005L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 71L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3031), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 3006L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 72L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3032), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 3007L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 73L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3033), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 3008L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 74L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3034), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 10000L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 75L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3035), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 10001L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 76L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3036), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 10002L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 77L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3037), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 10003L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 78L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3038), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 10004L,
                            RoleId = 1L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 10000L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3044), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2L,
                            RoleId = 2L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 10001L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3046), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 10L,
                            RoleId = 2L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 10002L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3047), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 11L,
                            RoleId = 2L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 10003L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3048), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2100L,
                            RoleId = 2L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 10004L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3052), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2101L,
                            RoleId = 2L,
                            TenantId = 1L
                        },
                        new
                        {
                            Id = 10005L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 316, DateTimeKind.Unspecified).AddTicks(3054), new TimeSpan(0, 8, 0, 0, 0)),
                            IsDeleted = false,
                            MenuId = 2102L,
                            RoleId = 2L,
                            TenantId = 1L
                        });
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityRoleOrganization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedTime");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletedTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsDeleted");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("RoleId");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleOrganizations", (string)null);
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("AccessFailedCount");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("BirthDay");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedTime");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("DeletedBy");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletedTime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("EmailConfirmed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("JobNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LockoutEnd");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("MobilePhone");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("PasswordHash");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("PhoneNumberConfirmed");

                    b.Property<string>("RealName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("RealName");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("SecurityStamp");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Status");

                    b.Property<string>("Surname")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Surname");

                    b.Property<string>("TelPhone")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("TelPhone");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedTime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail");

                    b.HasIndex("NormalizedUserName");

                    b.HasIndex("UserName");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "221d680a-f5d3-4029-b39c-1fd5c93b1e26",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@silky.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            JobNumber = "0001",
                            LockoutEnabled = false,
                            MobilePhone = "13111111111",
                            NormalizedEmail = "ADMIN@SILKY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPVWF3xCiGkcSdDAXSSHZ3/2wdRM265zo4Casp6GnTXajewnYo26jRAQFsyRhyvjDA==",
                            PhoneNumberConfirmed = false,
                            RealName = "管理员",
                            SecurityStamp = "df7b0045-87ed-40a0-96d6-84ed26661eea",
                            Status = 1,
                            TenantId = 1L,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f24a12f-857a-45ff-af39-28609bc2d8fa",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "liuhll@silky.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            JobNumber = "0002",
                            LockoutEnabled = false,
                            MobilePhone = "13111111112",
                            NormalizedEmail = "LIUHLL@SILKY.COM",
                            NormalizedUserName = "LIUHLL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFtFi0/YJStx+MXeOSsCx+gA9vB1kotyil+SFTOmVnPXZ9PjvN5W0HGiUykqkLtAgQ==",
                            PhoneNumberConfirmed = false,
                            RealName = "Liuhll",
                            SecurityStamp = "3bcdfa02-b8f1-4439-b008-4e24fcfa9509",
                            Status = 1,
                            TenantId = 1L,
                            UserName = "liuhll"
                        },
                        new
                        {
                            Id = 3L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45e67529-2622-48bf-8de5-a41aae20a1a0",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "lanchong@silky.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            JobNumber = "0003",
                            LockoutEnabled = false,
                            MobilePhone = "13111111113",
                            NormalizedEmail = "LANCHONG@SILKY.COM",
                            NormalizedUserName = "LANCHONG",
                            PasswordHash = "AQAAAAEAACcQAAAAEMwr6wsxQoZpUg+8nLuztee2CYM/WmMS3nnkgidUq47Ts6ZmsIZzkYHuWYIWSsZrng==",
                            PhoneNumberConfirmed = false,
                            RealName = "懒虫",
                            SecurityStamp = "7b637054-6fa1-47cd-9768-0471665643ce",
                            Status = 1,
                            TenantId = 1L,
                            UserName = "lanchong"
                        });
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityUserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedTime");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedTime");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityUserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedTime");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(196)
                        .HasColumnType("varchar(196)");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedTime");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityUserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedTime");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedTime");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("RoleId", "UserId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 339, DateTimeKind.Unspecified).AddTicks(4210), new TimeSpan(0, 8, 0, 0, 0)),
                            RoleId = 1L,
                            TenantId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 11, 20, 14, 33, 46, 339, DateTimeKind.Unspecified).AddTicks(4236), new TimeSpan(0, 8, 0, 0, 0)),
                            RoleId = 2L,
                            TenantId = 1L,
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityUserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedTime");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedTime");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Silky.Identity.Domain.UserSubsidiary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedTime");

                    b.Property<bool>("IsLeader")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsLeader");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("OrganizationId");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint")
                        .HasColumnName("PositionId");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TenantId");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedTime");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubsidiaries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsLeader = false,
                            OrganizationId = 1L,
                            PositionId = 1L,
                            TenantId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsLeader = false,
                            OrganizationId = 2L,
                            PositionId = 2L,
                            TenantId = 1L,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsLeader = false,
                            OrganizationId = 3L,
                            PositionId = 3L,
                            TenantId = 1L,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityRoleClaim", b =>
                {
                    b.HasOne("Silky.Identity.Domain.IdentityRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityRoleMenu", b =>
                {
                    b.HasOne("Silky.Identity.Domain.IdentityRole", null)
                        .WithMany("Menus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityRoleOrganization", b =>
                {
                    b.HasOne("Silky.Identity.Domain.IdentityRole", null)
                        .WithMany("CustomOrganizationDataRanges")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityUserClaim", b =>
                {
                    b.HasOne("Silky.Identity.Domain.IdentityUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityUserLogin", b =>
                {
                    b.HasOne("Silky.Identity.Domain.IdentityUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityUserRole", b =>
                {
                    b.HasOne("Silky.Identity.Domain.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silky.Identity.Domain.IdentityUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityUserToken", b =>
                {
                    b.HasOne("Silky.Identity.Domain.IdentityUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Silky.Identity.Domain.UserSubsidiary", b =>
                {
                    b.HasOne("Silky.Identity.Domain.IdentityUser", null)
                        .WithMany("UserSubsidiaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityRole", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("CustomOrganizationDataRanges");

                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Silky.Identity.Domain.IdentityUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Roles");

                    b.Navigation("Tokens");

                    b.Navigation("UserSubsidiaries");
                });
#pragma warning restore 612, 618
        }
    }
}
