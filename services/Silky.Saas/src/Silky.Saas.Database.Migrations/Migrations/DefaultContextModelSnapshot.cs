// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Silky.Saas.EntityFrameworkCore.DbContexts;

#nullable disable

namespace Silky.Saas.Database.Migrations.Migrations
{
    [DbContext(typeof(DefaultContext))]
    partial class DefaultContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Silky.Saas.Domain.Edition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Price");

                    b.Property<string>("Remark")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Remark");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("Sort");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Editions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "标准版",
                            Price = 0m,
                            Sort = 0
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "专业版",
                            Price = 500m,
                            Sort = 100
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "旗舰版",
                            Price = 2000m,
                            Sort = 1000
                        });
                });

            modelBuilder.Entity("Silky.Saas.Domain.EditionFeature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("EditionId")
                        .HasColumnType("bigint")
                        .HasColumnName("EditionId");

                    b.Property<long>("FeatureId")
                        .HasColumnType("bigint")
                        .HasColumnName("FeatureId");

                    b.Property<int>("FeatureValue")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("FeatureValue");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("FeatureId");

                    b.ToTable("EditionFeatures", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 1L,
                            FeatureId = 1L,
                            FeatureValue = 20
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 1L,
                            FeatureId = 2L,
                            FeatureValue = 0
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 1L,
                            FeatureId = 3L,
                            FeatureValue = 0
                        },
                        new
                        {
                            Id = 4L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 1L,
                            FeatureId = 4L,
                            FeatureValue = 0
                        },
                        new
                        {
                            Id = 5L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 1L,
                            FeatureId = 5L,
                            FeatureValue = 0
                        },
                        new
                        {
                            Id = 6L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 2L,
                            FeatureId = 1L,
                            FeatureValue = 50
                        },
                        new
                        {
                            Id = 7L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 2L,
                            FeatureId = 2L,
                            FeatureValue = 1
                        },
                        new
                        {
                            Id = 8L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 2L,
                            FeatureId = 3L,
                            FeatureValue = 0
                        },
                        new
                        {
                            Id = 9L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 2L,
                            FeatureId = 4L,
                            FeatureValue = 0
                        },
                        new
                        {
                            Id = 10L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 1L,
                            FeatureId = 5L,
                            FeatureValue = 0
                        },
                        new
                        {
                            Id = 11L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 3L,
                            FeatureId = 1L,
                            FeatureValue = 0
                        },
                        new
                        {
                            Id = 12L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 3L,
                            FeatureId = 2L,
                            FeatureValue = 1
                        },
                        new
                        {
                            Id = 13L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 3L,
                            FeatureId = 3L,
                            FeatureValue = 1
                        },
                        new
                        {
                            Id = 14L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 3L,
                            FeatureId = 4L,
                            FeatureValue = 1
                        },
                        new
                        {
                            Id = 15L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 3L,
                            FeatureId = 5L,
                            FeatureValue = 1
                        });
                });

            modelBuilder.Entity("Silky.Saas.Domain.Feature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Code");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DefaultValue")
                        .HasColumnType("int")
                        .HasColumnName("DefaultValue");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Description");

                    b.Property<long>("FeatureCatalogId")
                        .HasColumnType("bigint");

                    b.Property<int>("FeatureType")
                        .HasColumnType("int")
                        .HasColumnName("FeatureType");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Name");

                    b.Property<string>("Options")
                        .HasColumnType("longtext")
                        .HasColumnName("Options");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureCatalogId");

                    b.ToTable("Features", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "AllowMaxUserCount",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DefaultValue = 0,
                            Description = "0 = 无限制",
                            FeatureCatalogId = 1L,
                            FeatureType = 0,
                            IsDeleted = false,
                            Name = "最大用户数"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "EnabledAuditingLog",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DefaultValue = 0,
                            Description = "在应用程序中启用审计日志页面.",
                            FeatureCatalogId = 2L,
                            FeatureType = 1,
                            IsDeleted = false,
                            Name = "启用审计日志"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "EnabledMenuManage",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DefaultValue = 0,
                            Description = "在应用程序中启动菜单管理.",
                            FeatureCatalogId = 3L,
                            FeatureType = 1,
                            IsDeleted = false,
                            Name = "启用菜单管理"
                        },
                        new
                        {
                            Id = 4L,
                            Code = "EnabledSilkyDashboard",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DefaultValue = 0,
                            Description = "允许授权用户登录微服务管理端.",
                            FeatureCatalogId = 3L,
                            FeatureType = 1,
                            IsDeleted = false,
                            Name = "启用微服务管理端"
                        },
                        new
                        {
                            Id = 5L,
                            Code = "EnabledSaasManage",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DefaultValue = 0,
                            Description = "在应用程序中启动Saas管理.",
                            FeatureCatalogId = 4L,
                            FeatureType = 1,
                            IsDeleted = false,
                            Name = "启用Saas管理"
                        });
                });

            modelBuilder.Entity("Silky.Saas.Domain.FeatureCatalog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Name");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("FeatureCatalogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "身份标识"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "审计日志"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "权限管理"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Saas"
                        });
                });

            modelBuilder.Entity("Silky.Saas.Domain.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("EditionId")
                        .HasColumnType("bigint")
                        .HasColumnName("EditionId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Name");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("RealName");

                    b.Property<string>("Remark")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Remark");

                    b.Property<int>("Sort")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Sort");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Status");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.ToTable("Tenants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 3L,
                            IsDeleted = false,
                            Name = "Silky.Hero",
                            RealName = "Silky.Hero",
                            Remark = "Silky.Hero权限管理系统开发社区",
                            Sort = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EditionId = 2L,
                            IsDeleted = false,
                            Name = "Silky",
                            RealName = "Silky",
                            Remark = "Silky微服务开发框架",
                            Sort = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Silky.Saas.Domain.EditionFeature", b =>
                {
                    b.HasOne("Silky.Saas.Domain.Edition", "Edition")
                        .WithMany("EditionFeatures")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silky.Saas.Domain.Feature", "Feature")
                        .WithMany("EditionFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Silky.Saas.Domain.Feature", b =>
                {
                    b.HasOne("Silky.Saas.Domain.FeatureCatalog", "FeatureCatalog")
                        .WithMany("Features")
                        .HasForeignKey("FeatureCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureCatalog");
                });

            modelBuilder.Entity("Silky.Saas.Domain.Tenant", b =>
                {
                    b.HasOne("Silky.Saas.Domain.Edition", "Edition")
                        .WithMany("Tenants")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("Silky.Saas.Domain.Edition", b =>
                {
                    b.Navigation("EditionFeatures");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("Silky.Saas.Domain.Feature", b =>
                {
                    b.Navigation("EditionFeatures");
                });

            modelBuilder.Entity("Silky.Saas.Domain.FeatureCatalog", b =>
                {
                    b.Navigation("Features");
                });
#pragma warning restore 612, 618
        }
    }
}
